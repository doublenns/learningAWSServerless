name: PR Builder

on:
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      tf_actions_working_dir: udemy-advanced_serverless_workflow_with_step_functions/terraform
      lambda_source_code_dir: udemy-advanced_serverless_workflow_with_step_functions/lambda_source_code
      
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        # with:
        #     python-version: "3.x"
        #     architecture:   "x64"

      - name: Install flake8 - Python Linter
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: flake8 - Lint Lambda Code
        run: |
          flake8 get_expired_users.py
        working-directory: ${{ env.lambda_source_code_dir }}

      - name: tflint/reviewdog - Lint Terraform Code
        uses: reviewdog/action-tflint@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # reporter: github-pr-review # Optional. Change reporter
          # fail_on_error: "true" # Optional. Fail action if errors are found
          # filter_mode: "nofilter" # Optional. Check all files, not just the diff
          # flags: "--module" # Optional. Add custom tflint flags

      - name: tfsec - Terraform Security Scan
        uses: triat/terraform-security-scan@v2.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:      ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:             us-west-2

      # Terraform Setup
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.26

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TFSTATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TFSTATE_OBJECT_KEY }}"

      # Note: Color is disabled in the following TF commands to keep
      # messy characters out of the pull request comment

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan -input=false -no-color

      - name: Post Terraform PR Comment
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
